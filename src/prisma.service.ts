import { Injectable, OnModuleDestroy, OnModuleInit } from '@nestjs/common';
import { PrismaClient } from '@prisma/client';

/**
 * Service Prisma pour l'acc√®s √† la base de donn√©es
 * 
 * Ce service encapsule le client Prisma ORM et g√®re la connexion √† la base de donn√©es.
 * Il est inject√© dans les autres services qui ont besoin d'acc√©der aux donn√©es.
 * 
 * Prisma sert d'ORM (Object-Relational Mapping) pour:
 * - Fournir une interface type-safe pour interagir avec la base de donn√©es PostgreSQL
 * - G√©rer les migrations de sch√©ma
 * - Offrir une API intuitive pour les requ√™tes CRUD
 * - Maintenir les relations entre les entit√©s (Users, Attendance, Location)
 */
@Injectable()
export class PrismaService 
extends PrismaClient 
implements OnModuleInit, OnModuleDestroy 
{
  /**
   * M√©thode appel√©e √† l'initialisation du module
   * 
   * √âtablit la connexion √† la base de donn√©es PostgreSQL
   * d√®s le d√©marrage de l'application, en utilisant la
   * cha√Æne de connexion d√©finie dans les variables d'environnement.
   */
  async onModuleInit() {
    await this.$connect();
    console.log('üìä Connexion √† la base de donn√©es √©tablie');
  }

  /**
   * M√©thode appel√©e √† la destruction du module
   * 
   * Ferme proprement la connexion √† la base de donn√©es
   * lorsque l'application s'arr√™te, √©vitant ainsi les
   * connexions fant√¥mes et les fuites de ressources.
   */
  async onModuleDestroy(): Promise<void> {
    await this.$disconnect();
    console.log('üìä D√©connexion de la base de donn√©es effectu√©e');
  }
}
